/*
* THIS FILE IS AUTOMATICALLY GENERATED DURING THE CMAKE PROCESS. DO NOT MAKE
* ANY CHANGES TO THIS FILE AS THEY WILL BE OVER WRITTEN THE NEXT TIME
* CMAKE IS RUN. MAKE CHANGES TO THE ORIGINAL FILE
*/

/* Quiet some warnings from MSVC compilers */
#if (_MSC_VER >= 1)
  #define _CRT_SECURE_NO_WARNINGS 

  #pragma warning (error: 4715) /* Not all control points return a value */

  #pragma warning(disable:4244)
  #pragma warning(disable:4267)
  #pragma warning(disable:4305)

#endif

#include <iostream>
#include <cstdlib>

#include "UnitTestSupport.hpp"

/* Definitions for Fortran Test Functions. They need to be wrapped in the 
* __cpluscplus because the fortran functions are like pure "C" functions
* and need to keep their original names and not get mangled by the CPP
* compiler.
*
* Place a definition for EACH Fortran function that you write
*/
#ifdef __cplusplus
extern "C" {
#endif

/**
* @param result The result to be passed back from the function.
*/
void @TEST_NAME@ExecuteTest(int* result);

#ifdef __cplusplus
}
#endif


// -----------------------------------------------------------------------------
// Start the Unit Test program here
// -----------------------------------------------------------------------------
int main(int argc, char const *argv[])
{
  // These 2 Variables are required
  int err = EXIT_SUCCESS;
  int result = 0;

  // Encapsulate all of our tests in a try-catch block since the macros
  // generate code that throws execptions if the conditions do not meet
  // expectations. The general idea is to return a result=0 for a passing
  // test or result != 0 for a test that fails in some way. The Fortran
  // functions could set various non-zero values for 'result' which might
  // help the developer focus in on the particular failing test
  try {
    // This block of code are the necessary 4 lines for each fortran
    // test function.
    EMSOFT_ENTER_TEST(@TEST_NAME@ExecuteTest);
    @TEST_NAME@ExecuteTest(&result);
    EMSOFT_REQUIRE_EQUAL(result, 0)
    EMSOFT_LEAVE_TEST(@TEST_NAME@ExecuteTest)
  } 
  catch (TestException& e)
  {
    TestFailed(EMsoft::unittest::CurrentMethod);
    std::cout << e.what() << &result << std::endl;
    err = EXIT_FAILURE;
  }


  // Use this macro to print out a summary of the number of tests passed, failed and total
  // number of tests
  PRINT_TEST_SUMMARY()

  return err;
}
